import { useEffect, useState } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { Plus, Edit, Trash2 } from 'lucide-react';
import LoadingSpinner from '@/components/LoadingSpinner';
import toast from 'react-hot-toast';
import { useSearchParams } from 'react-router-dom';

// Interface for the Movie document from MongoDB
export interface IMovie {
  _id: string; // MongoDB uses _id
  title: string;
  description: string;
  genre: string;
  duration: number;
  release_date: string;
  poster_url: string;
  trailer_url?: string;
  createdAt: string; // MongoDB uses createdAt
  updatedAt: string;
}

// Form data type, excluding fields generated by the database
type MovieFormData = Omit<IMovie, '_id' | 'createdAt' | 'updatedAt'>;

// Props for the MovieForm component
interface MovieFormProps {
  movieToEdit: IMovie | null;
  onClose: () => void;
  onSave: () => void;
}

// ============== MovieForm Component ==============
const MovieForm: React.FC<MovieFormProps> = ({ movieToEdit, onClose, onSave }) => {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting },
  } = useForm<MovieFormData>();

  useEffect(() => {
    if (movieToEdit) {
      reset({
        ...movieToEdit,
        release_date: new Date(movieToEdit.release_date).toISOString().split('T')[0],
      });
    } else {
      reset();
    }
  }, [movieToEdit, reset]);

  const onSubmit: SubmitHandler<MovieFormData> = async (formData) => {
    try {
      const dataToSubmit = {
        ...formData,
        duration: Number(formData.duration),
      };

      const url = movieToEdit ? `/api/movies/${movieToEdit._id}` : '/api/movies';
      const method = movieToEdit ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dataToSubmit),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save movie.');
      }

      toast.success(`Movie ${movieToEdit ? 'updated' : 'added'} successfully!`);
      onSave();
    } catch (error: any) {
      toast.error(error.message);
      console.error('Error saving movie:', error);
    }
  };

  return (
    <div className="fixed inset-0 bg-dark-900/80 z-50 flex items-center justify-center">
      <div className="card w-full max-w-2xl p-6 relative">
        <button onClick={onClose} className="absolute top-4 right-4 text-slate-400 hover:text-white">&times;</button>
        <h2 className="text-2xl font-bold mb-6">{movieToEdit ? 'Edit Movie' : 'Add New Movie'}</h2>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Title</label>
            <input {...register('title', { required: 'Title is required' })} className="input" />
            {errors.title && <p className="text-red-400 text-sm mt-1">{errors.title.message}</p>}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Description</label>
            <textarea {...register('description')} className="input" rows={4}></textarea>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Genre</label>
              <input {...register('genre', { required: 'Genre is required' })} className="input" />
              {errors.genre && <p className="text-red-400 text-sm mt-1">{errors.genre.message}</p>}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Duration (minutes)</label>
              <input type="number" {...register('duration', { required: 'Duration is required' })} className="input" />
              {errors.duration && <p className="text-red-400 text-sm mt-1">{errors.duration.message}</p>}
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Release Date</label>
              <input type="date" {...register('release_date', { required: 'Release date is required' })} className="input" />
              {errors.release_date && <p className="text-red-400 text-sm mt-1">{errors.release_date.message}</p>}
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Poster URL</label>
              <input {...register('poster_url')} className="input" />
            </div>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Trailer URL (Embed)</label>
            <input {...register('trailer_url')} className="input" />
          </div>
          <div className="flex justify-end space-x-4 pt-4">
            <button type="button" onClick={onClose} className="btn btn-secondary">Cancel</button>
            <button type="submit" disabled={isSubmitting} className="btn btn-primary">
              {isSubmitting ? <LoadingSpinner size="sm" /> : 'Save Movie'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// ============== DeleteConfirmationModal Component ==============
interface DeleteModalProps {
  movie: IMovie;
  onClose: () => void;
  onConfirm: (movieId: string) => void;
}

const DeleteConfirmationModal: React.FC<DeleteModalProps> = ({ movie, onClose, onConfirm }) => {
  return (
    <div className="fixed inset-0 bg-dark-900/80 z-50 flex items-center justify-center">
      <div className="card p-6 w-full max-w-md">
        <h2 className="text-xl font-bold mb-4">Confirm Deletion</h2>
        <p className="text-slate-300 mb-6">
          Are you sure you want to delete the movie "<strong>{movie.title}</strong>"? This action cannot be undone.
        </p>
        <div className="flex justify-end space-x-4">
          <button onClick={onClose} className="btn btn-secondary">
            Cancel
          </button>
          <button
            onClick={() => onConfirm(movie._id)}
            className="btn btn-danger"
          >
            Delete Movie
          </button>
        </div>
      </div>
    </div>
  );
};

// ============== AdminMoviesPage Component ==============
export default function AdminMoviesPage() {
  const [movies, setMovies] = useState<IMovie[]>([]);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingMovie, setEditingMovie] = useState<IMovie | null>(null);
  const [movieToDelete, setMovieToDelete] = useState<IMovie | null>(null);
  const [searchParams, setSearchParams] = useSearchParams();

  useEffect(() => {
    fetchMovies();
  }, []);

  const fetchMovies = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/movies');
      if (!response.ok) {
        throw new Error('Failed to fetch movies');
      }
      const data = await response.json();
      setMovies(data || []);
    } catch (error) {
      console.error('Error fetching movies:', error);
      toast.error('Failed to load movies');
    } finally {
      setLoading(false);
    }
  };

  const handleOpenModal = (movie: IMovie | null) => {
    setEditingMovie(movie);
    setIsModalOpen(true);
  };

  useEffect(() => {
    if (searchParams.get('openModal') === 'true') {
      handleOpenModal(null);
      searchParams.delete('openModal');
      setSearchParams(searchParams);
    }
  }, []);

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingMovie(null);
  };

  const handleSave = () => {
    fetchMovies();
    handleCloseModal();
  };

  const handleDeleteClick = (movie: IMovie) => {
    setMovieToDelete(movie);
  };

  const handleConfirmDelete = async (movieId: string) => {
    try {
      const response = await fetch(`/api/movies/${movieId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to delete movie.');
      }

      toast.success('Movie deleted successfully');
      fetchMovies();
    } catch (error: any) {
      console.error('Error deleting movie:', error);
      toast.error(error.message);
    } finally {
      setMovieToDelete(null);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {isModalOpen && (
        <MovieForm
          movieToEdit={editingMovie}
          onClose={handleCloseModal}
          onSave={handleSave}
        />
      )}
      {movieToDelete && (
        <DeleteConfirmationModal
          movie={movieToDelete}
          onClose={() => setMovieToDelete(null)}
          onConfirm={handleConfirmDelete}
        />
      )}

      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-display font-bold">Movies</h1>
          <p className="text-slate-400">Manage your movie catalog</p>
        </div>
        <button
          onClick={() => handleOpenModal(null)}
          className="btn btn-primary flex items-center space-x-2"
        >
          <Plus className="h-5 w-5" />
          <span>Add Movie</span>
        </button>
      </div>

      {movies.length === 0 ? (
        <div className="text-center py-12 card">
          <p className="text-slate-400 text-lg mb-4">No movies found</p>
          <button onClick={() => handleOpenModal(null)} className="btn btn-primary">Add Your First Movie</button>
        </div>
      ) : (
        <div className="card overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-dark-800">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">
                    Movie
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">
                    Genre
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">
                    Duration
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">
                    Release Date
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-slate-400 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-dark-700">
                {movies.map((movie) => (
                  <tr key={movie._id} className="hover:bg-dark-800/50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <img
                          src={movie.poster_url || 'https://placehold.co/100x150/0f172a/94a3b8?text=No+Image'}
                          alt={movie.title}
                          className="w-12 h-18 object-cover rounded"
                        />
                        <div className="ml-4">
                          <div className="text-sm font-medium text-white max-w-xs truncate">
                            {movie.title}
                          </div>
                          <div className="text-sm text-slate-400 line-clamp-2 max-w-xs">
                            {movie.description}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="px-2 py-1 text-xs font-medium bg-primary-500/20 text-primary-400 rounded-full">
                        {movie.genre}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-300">
                      {movie.duration} mins
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-300">
                      {new Date(movie.release_date).toLocaleDateString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2">
                        <button onClick={() => handleOpenModal(movie)} className="text-green-400 hover:text-green-300 p-2 rounded-full hover:bg-dark-700">
                          <Edit className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleDeleteClick(movie)}
                          className="text-red-400 hover:text-red-300 p-2 rounded-full hover:bg-dark-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
}